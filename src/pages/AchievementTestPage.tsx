/**
 * Achievement Test Page
 * 
 * Test page for showcasing all achievement components and functionality.
 * Includes examples of different achievement types, rarities, and celebrations.
 */

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Trophy, 
  Star, 
  Award, 
  Target,
  Crown,
  Zap,
  Users,
  Calendar,
  TrendingUp,
  Play,
  Sparkles
} from 'lucide-react';
import { AchievementDashboard } from '@/components/gamification/AchievementDashboard';
import { AchievementGallery } from '@/components/gamification/AchievementGallery';
import { AchievementCelebration, MiniAchievementCelebration } from '@/components/gamification/AchievementCelebration';
import { AchievementNotificationManager, useAchievementNotifications } from '@/components/gamification/AchievementNotifications';
import type { Achievement, AchievementRarity } from '@/types/gamification';
import type { AchievementUnlockResult } from '@/services/AchievementEngine';

const AchievementTestPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'dashboard' | 'gallery' | 'celebrations' | 'notifications'>('dashboard');\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [showMiniCelebration, setShowMiniCelebration] = useState(false);\n  const [selectedRarity, setSelectedRarity] = useState<AchievementRarity>('rare');\n  \n  const userId = 'test-user-123';\n  const { triggerUnlock, triggerProgress } = useAchievementNotifications(userId);\n\n  // Sample achievements for testing\n  const sampleAchievements: Achievement[] = [\n    {\n      id: 'first_workout',\n      name: 'First Steps',\n      description: 'Complete your first workout',\n      icon: <Trophy className=\"w-6 h-6\" />,\n      category: 'milestone',\n      rarity: 'common',\n      isSecret: false,\n      isRepeatable: false,\n      requirements: {\n        type: 'workout_count',\n        target: 1,\n        timeframe: null\n      },\n      rewards: {\n        xp: 100,\n        title: 'Beginner'\n      },\n      sortOrder: 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: 'consistency_week',\n      name: 'Week Warrior',\n      description: 'Work out 5 times in a week',\n      icon: <Calendar className=\"w-6 h-6\" />,\n      category: 'consistency',\n      rarity: 'uncommon',\n      isSecret: false,\n      isRepeatable: true,\n      requirements: {\n        type: 'workouts_per_week',\n        target: 5,\n        timeframe: 'week'\n      },\n      rewards: {\n        xp: 250,\n        title: 'Consistent'\n      },\n      sortOrder: 2,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: 'strength_pr',\n      name: 'Personal Best',\n      description: 'Set a new personal record',\n      icon: <TrendingUp className=\"w-6 h-6\" />,\n      category: 'strength',\n      rarity: 'rare',\n      isSecret: false,\n      isRepeatable: true,\n      requirements: {\n        type: 'personal_record',\n        target: 1,\n        timeframe: null\n      },\n      rewards: {\n        xp: 500,\n        title: 'Record Breaker'\n      },\n      sortOrder: 3,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: 'social_friend',\n      name: 'Social Butterfly',\n      description: 'Add 10 gym friends',\n      icon: <Users className=\"w-6 h-6\" />,\n      category: 'social',\n      rarity: 'epic',\n      isSecret: false,\n      isRepeatable: false,\n      requirements: {\n        type: 'friend_count',\n        target: 10,\n        timeframe: null\n      },\n      rewards: {\n        xp: 750,\n        title: 'Social'\n      },\n      sortOrder: 4,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: 'legendary_streak',\n      name: 'Unstoppable',\n      description: 'Maintain a 100-day workout streak',\n      icon: <Crown className=\"w-6 h-6\" />,\n      category: 'consistency',\n      rarity: 'legendary',\n      isSecret: false,\n      isRepeatable: false,\n      requirements: {\n        type: 'streak_days',\n        target: 100,\n        timeframe: null\n      },\n      rewards: {\n        xp: 2000,\n        title: 'Unstoppable'\n      },\n      sortOrder: 5,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: 'mythic_master',\n      name: 'Fitness Deity',\n      description: 'Reach the ultimate level of fitness mastery',\n      icon: <Sparkles className=\"w-6 h-6\" />,\n      category: 'mastery',\n      rarity: 'mythic',\n      isSecret: true,\n      isRepeatable: false,\n      requirements: {\n        type: 'level',\n        target: 100,\n        timeframe: null\n      },\n      rewards: {\n        xp: 5000,\n        title: 'Fitness Deity'\n      },\n      sortOrder: 6,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  ];\n\n  const createSampleUnlockResult = (rarity: AchievementRarity): AchievementUnlockResult => {\n    const achievement = sampleAchievements.find(a => a.rarity === rarity) || sampleAchievements[0];\n    return {\n      achievement,\n      previousProgress: 0.8,\n      newProgress: 1.0,\n      unlockedAt: new Date(),\n      xpAwarded: achievement.rewards.xp\n    };\n  };\n\n  const triggerTestCelebration = () => {\n    setShowCelebration(true);\n  };\n\n  const triggerTestMiniCelebration = () => {\n    setShowMiniCelebration(true);\n  };\n\n  const triggerTestNotification = () => {\n    const unlockResult = createSampleUnlockResult(selectedRarity);\n    triggerUnlock(unlockResult);\n  };\n\n  const triggerTestProgress = () => {\n    const achievement = sampleAchievements.find(a => a.rarity === selectedRarity) || sampleAchievements[0];\n    triggerProgress(achievement, 0.6, 0.85);\n  };\n\n  const tabs = [\n    { id: 'dashboard', label: 'Dashboard', icon: <Trophy className=\"w-4 h-4\" /> },\n    { id: 'gallery', label: 'Gallery', icon: <Star className=\"w-4 h-4\" /> },\n    { id: 'celebrations', label: 'Celebrations', icon: <Sparkles className=\"w-4 h-4\" /> },\n    { id: 'notifications', label: 'Notifications', icon: <Zap className=\"w-4 h-4\" /> }\n  ];\n\n  const rarityOptions: AchievementRarity[] = ['common', 'uncommon', 'rare', 'epic', 'legendary', 'mythic'];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <Trophy className=\"w-8 h-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                Achievement System Test\n              </h1>\n            </div>\n            \n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Test all achievement components and interactions\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <nav className=\"flex space-x-8\">\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 hover:border-gray-300'\n                }`}\n              >\n                {tab.icon}\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {activeTab === 'dashboard' && (\n          <div className=\"space-y-8\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Achievement Dashboard\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                Comprehensive dashboard showing all achievements with filtering and search capabilities.\n              </p>\n              <AchievementDashboard userId={userId} />\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'gallery' && (\n          <div className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Gallery - Grid View\n                </h2>\n                <AchievementGallery \n                  userId={userId} \n                  layout=\"grid\"\n                  maxItems={12}\n                />\n              </div>\n              \n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Gallery - Carousel\n                </h2>\n                <AchievementGallery \n                  userId={userId} \n                  layout=\"carousel\"\n                  compact\n                />\n              </div>\n            </div>\n            \n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Unlocked Only Gallery\n              </h2>\n              <AchievementGallery \n                userId={userId} \n                showOnlyUnlocked\n                layout=\"list\"\n              />\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'celebrations' && (\n          <div className=\"space-y-8\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Achievement Celebrations\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                Test different celebration animations based on achievement rarity.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Select Rarity:\n                  </label>\n                  <select\n                    value={selectedRarity}\n                    onChange={(e) => setSelectedRarity(e.target.value as AchievementRarity)}\n                    className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                  >\n                    {rarityOptions.map(rarity => (\n                      <option key={rarity} value={rarity} className=\"capitalize\">\n                        {rarity}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div className=\"flex space-x-4\">\n                  <button\n                    onClick={triggerTestCelebration}\n                    className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n                  >\n                    <Play className=\"w-4 h-4\" />\n                    <span>Full Celebration</span>\n                  </button>\n                  \n                  <button\n                    onClick={triggerTestMiniCelebration}\n                    className=\"flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors\"\n                  >\n                    <Play className=\"w-4 h-4\" />\n                    <span>Mini Celebration</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Celebration Features by Rarity\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {rarityOptions.map(rarity => {\n                  const features = {\n                    common: ['Basic confetti', 'Simple animation'],\n                    uncommon: ['Green confetti', 'Bounce animation'],\n                    rare: ['Blue confetti', 'Spring animation', 'Glow effect'],\n                    epic: ['Purple confetti', 'Screen flash', 'Sparkles'],\n                    legendary: ['Golden confetti', 'Fireworks', 'Screen flash', 'Epic sparkles'],\n                    mythic: ['Rainbow confetti', 'Multiple fireworks', 'Screen flash', 'Epic sparkles', 'Sound indicator']\n                  };\n                  \n                  return (\n                    <div key={rarity} className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white capitalize mb-2\">\n                        {rarity}\n                      </h4>\n                      <ul className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1\">\n                        {features[rarity].map((feature, index) => (\n                          <li key={index}>• {feature}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'notifications' && (\n          <div className=\"space-y-8\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n                Achievement Notifications\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                Test different notification types and styles.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Select Rarity:\n                  </label>\n                  <select\n                    value={selectedRarity}\n                    onChange={(e) => setSelectedRarity(e.target.value as AchievementRarity)}\n                    className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                  >\n                    {rarityOptions.map(rarity => (\n                      <option key={rarity} value={rarity} className=\"capitalize\">\n                        {rarity}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div className=\"flex space-x-4\">\n                  <button\n                    onClick={triggerTestNotification}\n                    className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n                  >\n                    <Trophy className=\"w-4 h-4\" />\n                    <span>Achievement Unlock</span>\n                  </button>\n                  \n                  <button\n                    onClick={triggerTestProgress}\n                    className=\"flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors\"\n                  >\n                    <Target className=\"w-4 h-4\" />\n                    <span>Progress Update</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Notification Types\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2\">\n                    Achievement Unlock\n                  </h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Full notification with achievement details, XP reward, and action buttons.\n                  </p>\n                </div>\n                \n                <div className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2\">\n                    Progress Update\n                  </h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Compact notification showing progress towards achievement completion.\n                  </p>\n                </div>\n                \n                <div className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2\">\n                    Toast Notification\n                  </h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Minimal toast for quick acknowledgment of achievement unlocks.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Celebration Overlays */}\n      {showCelebration && (\n        <AchievementCelebration\n          unlockResult={createSampleUnlockResult(selectedRarity)}\n          onComplete={() => setShowCelebration(false)}\n        />\n      )}\n\n      {showMiniCelebration && (\n        <MiniAchievementCelebration\n          achievement={sampleAchievements.find(a => a.rarity === selectedRarity) || sampleAchievements[0]}\n          xpAwarded={500}\n          onComplete={() => setShowMiniCelebration(false)}\n        />\n      )}\n\n      {/* Notification Manager */}\n      <AchievementNotificationManager userId={userId} />\n    </div>\n  );\n};\n\nexport default AchievementTestPage;"